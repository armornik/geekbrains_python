"""
Задание 4.

Для этой задачи:
1) придумайте 1-3 решения (желательно хотя бы два)
2) оцените сложность каждого решения в нотации О-большое
3) сделайте вывод, какое решение эффективнее и почему

Примечание:
Без выполнения пунктов 2 и 3 задание считается нерешенным. Пункты 2 и 3 можно выполнить
через строки документации в самом коде.
Если у вас возникают сложности, постарайтесь подумать как можно решить задачу,
а не писать "мы это не проходили)".
Алгоритмизатор должен развивать мышление, а это прежде всего практика.
А без столкновения со сложностями его не развить.


Сама задача:
Пользователи веб-ресурса проходят аутентификацию.
В системе хранятся логин, пароль и отметка об активации учетной записи.

Нужно реализовать проверку, может ли пользователь быть допущен к ресурсу.
При этом его учетка должна быть активирована.
А если нет, то польз-лю нужно предложить ее пройти.

Приложение должно давать ответы на эти вопросы и быть реализовано в виде функции.
Для реализации хранилища можно применить любой подход,
который вы придумаете, например, реализовать словарь.
"""

my_dict = {'Alice': {'login': 'Alice', 'password': 'as123', 'mark': True},
           'Boris': {'login': 'Boris', 'password': 'as123', 'mark': False},
           'admin': {'login': 'admin', 'password': 'as123', 'mark': True},
           'user': {'login': 'user', 'password': 'as123', 'mark': False},
           }


# O(n)
def check_mark(dictionary: dict):
    for val in dictionary.values(): # O(n) - for, O(1) - values
        if val['mark']: # O(1)
            print('Доступ разрешён')
        else:
            print('Вам необходимо пройти активацию')


# check_mark(my_dict)


# O(n^3)
def check_mark2(dictionary: dict):
    for val in dictionary.values(): # O(n) - for, O(1) - values
        for item, val2 in val.items(): # O(n) - for, O(1) - items
            if item == 'mark':  # O(1)
                if not val2: # O(1)
                    print('Вам необходимо пройти активацию')
                else:
                    print('Доступ разрешён')


check_mark2(my_dict)

# Второй вариант хуже, так как появляются дополнительные проверки и большая вложенность цикла